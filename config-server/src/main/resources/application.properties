#访问配置信息的URL与配置文件的映射关系如下：
#/{application}/{profile}[/{label}]
#/{application}-{profile}.yml
#/{label}/{application}-{profile}.yml
#/{application}-{profile}.properties
#/{label}/{application}-{profile}.properties
#

#    {application}映射到Config客户端的spring.cloud.config.name属性
#    {profile}映射到Config客户端的spring.profiles.active属性，可以用来区分环境
#    {label}映射到Git服务器的commit id, 分支名称或者tag，默认值为master

#
#建立配置文件的名字一般是有两部分组成，举个例子感受下，
#alan-provider-data-config-dev.properties，
#其中alan-provider-data-config是第一部分,相当于上面的{application}，这部分建议通过命名规则能让你知道是哪一个项目的配置，
#并且客户端要配置spring.cloud.config.name=alan-provider-data-config,
#才能让客户端知道自己要去服务端找哪一个配置文件。
#dev是第二部分,相当于上面的{profile}，这部分用以区别配置文件应用的场景，是开发环境、测试环境或者生产环境




#此文件添加配置服务的基本信息以及Git仓库的相关信息


spring.application.name=config-server
server.port=1201
#配置git仓库地址
spring.cloud.config.server.git.uri=https://github.com/kouhanyao/SpringCloudConfigTest.git
#项目下的具体路径,可以配置多个
spring.cloud.config.server.git.searchPaths=
#配置仓库的分支
spring.cloud.config.label=master
#访问git仓库的用户名
#spring.cloud.config.server.git.username=your username
#访问git仓库的密码
#spring.cloud.config.server.git.password=your password
#只加载本地文件
#spring.profiles.active=native
#从本地classpath 或文件系统中加载配置文件(加载本地开发环境)
#spring.cloud.config.server.native.searchLocations=F:/temp,classpath:/config